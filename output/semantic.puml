' Generated by UML Generator
' Encoded: hLXBRziu4BxxL-XehorZpqOHDCbkaG1rDsY2tcbfKhEHAAz4UPjzyBSlAKhaaA9aAUqbWJZ3uJo--ORc-ugJajTvjgXUA3kHakHHaf6gkkQyf8UQmtrIi4VwDqI_BeuqXIYXPPB1Oj5eHKOj-cSHHJ5DdueNOBke-QTM-Ei9vAVygxxEjA87cb7-YbHY-MTj32rT6vl8MjX4lVqhjVShy4yaX-Lg5prAA-nhk_YHicQHCjwkA2jgfVLdJQk7-f3HHAqTYY83eZnQWypA3GNs6yWeIv8MIdukQBhuhmlyjc0LB-k45-LGwC5WcnG3XxBQHNUaEkx9wPrsUXCzTB8he_cHLdmNgR_lN6cJDEH4BstpKlN5Q3VfQRrLaeVE3INeEnB8CqbJex8qyUviU5qofsLw3_nOf3h9Fojx_MALmEkIFJbepOkKFbFb-dXDZwIwAT9N325T7-rwhpJ-MPl8EsceUc-rjvfRbZOYhoqgu7Ujm0yPxHr5qyG-dG2wpoPetD1Ii6zZTuwUW3DpmZGgEnKLvRHWdTkwuZR3mpJsWvmrZPmI2GguRRvKEA8NZZX22IoX12tH_9H13emJ7PaHQ3mbyZ3K389qd1teHiFdgbwYEigjVq5wFNb7ta0zeAPxeD59BFtjC25tiYAZAU6GzXlJIL2lLFrecv9XavC7XjftXEJbdibyKqvO0bX6g-k3T9iatBD8gm-KaQot-gXguyshcEP_7Bv1puPnk4H7nZWC2LTPRImr46YvHjTXrwOTA-g0m0vk0uUThMLWmoN3JReiWvXsTZTi8lWkUK52OZzgg4llW1bVNQ---KnP80qflsptJ7B2Cz75HvBfDB2teFH9rNQLadWDuxHLOqXtLa3LjfRImvUBbTzVIk6k9H377JbbfY92wLu0WrB1VWnrlBi3zvh7SfwYmtVB8Ftv2F7s-E9RUJsk9GTCy47IDUrW4VtEk0Gx8kmnIX71pXOXC8aUcCGmcCH0LOKBcs_aJBOrfzbs442Y1yl1JIxlNmAU669C4UP64IHI4UnJCTYdOfZxnGp4Yyk85xCHBwOXtbmEJ8X3zvp-nI0Ep_yfCtho7I4UdzYsC1EdzVX87XxbRngQDlrpnw7Qqq4YE4z69aUGWCT7HN3OJ9q8_Q4qR_ACJvHfqs0IjySZLwxPD3r_gCsSM2DtmF1b8iHpeGkZQVd7r_nGP4_aaEccNwjbk4vuJR8T7ZrEntPo4wNj-KwaA-JTnJkXLz_cp00BeEFjomRoUAaltoN8tdie8OLd2SEqqTUmG_ViFsiesePFv7HsvVBdwsrTgjxLQStWknpaNIzi8bR3cIWHE3dnQeij18rV0h7Ld8Mfzjnvq59D5uXrvHTzVPBBl4stFp1kD9pKxq-D7hGWYsD_THv9QPMwBwmXkSmgj1zO_b3INFweFeFHYXcnRjjVsLXlYLLMxQjUf_26wxRnvZCyDuo0l6a4z-cdvaJt0TFHRdsoq-Y7NR8tHUED63GwwIPeulmYgstBqdtfkjZttL_YM3z1u9VFGYwQ9uz5-r8NN3JRxJCBjeYUAxRRVwySUBfYPTqoKb_MKf8hYEChXuxmRNkx7PVPmtn9UvIzKFLSjoBachjepMCxhakOlrKe-0XVPktvalPuVtde8EKSFWZJG1pBG9qkN9Zk3yYwlW-8t9Pl4jYikyrdrmrO0xRU0qlhFFiV
' URL: http://www.plantuml.com/plantuml/uml/hLXBRziu4BxxL-XehorZpqOHDCbkaG1rDsY2tcbfKhEHAAz4UPjzyBSlAKhaaA9aAUqbWJZ3uJo--ORc-ugJajTvjgXUA3kHakHHaf6gkkQyf8UQmtrIi4VwDqI_BeuqXIYXPPB1Oj5eHKOj-cSHHJ5DdueNOBke-QTM-Ei9vAVygxxEjA87cb7-YbHY-MTj32rT6vl8MjX4lVqhjVShy4yaX-Lg5prAA-nhk_YHicQHCjwkA2jgfVLdJQk7-f3HHAqTYY83eZnQWypA3GNs6yWeIv8MIdukQBhuhmlyjc0LB-k45-LGwC5WcnG3XxBQHNUaEkx9wPrsUXCzTB8he_cHLdmNgR_lN6cJDEH4BstpKlN5Q3VfQRrLaeVE3INeEnB8CqbJex8qyUviU5qofsLw3_nOf3h9Fojx_MALmEkIFJbepOkKFbFb-dXDZwIwAT9N325T7-rwhpJ-MPl8EsceUc-rjvfRbZOYhoqgu7Ujm0yPxHr5qyG-dG2wpoPetD1Ii6zZTuwUW3DpmZGgEnKLvRHWdTkwuZR3mpJsWvmrZPmI2GguRRvKEA8NZZX22IoX12tH_9H13emJ7PaHQ3mbyZ3K389qd1teHiFdgbwYEigjVq5wFNb7ta0zeAPxeD59BFtjC25tiYAZAU6GzXlJIL2lLFrecv9XavC7XjftXEJbdibyKqvO0bX6g-k3T9iatBD8gm-KaQot-gXguyshcEP_7Bv1puPnk4H7nZWC2LTPRImr46YvHjTXrwOTA-g0m0vk0uUThMLWmoN3JReiWvXsTZTi8lWkUK52OZzgg4llW1bVNQ---KnP80qflsptJ7B2Cz75HvBfDB2teFH9rNQLadWDuxHLOqXtLa3LjfRImvUBbTzVIk6k9H377JbbfY92wLu0WrB1VWnrlBi3zvh7SfwYmtVB8Ftv2F7s-E9RUJsk9GTCy47IDUrW4VtEk0Gx8kmnIX71pXOXC8aUcCGmcCH0LOKBcs_aJBOrfzbs442Y1yl1JIxlNmAU669C4UP64IHI4UnJCTYdOfZxnGp4Yyk85xCHBwOXtbmEJ8X3zvp-nI0Ep_yfCtho7I4UdzYsC1EdzVX87XxbRngQDlrpnw7Qqq4YE4z69aUGWCT7HN3OJ9q8_Q4qR_ACJvHfqs0IjySZLwxPD3r_gCsSM2DtmF1b8iHpeGkZQVd7r_nGP4_aaEccNwjbk4vuJR8T7ZrEntPo4wNj-KwaA-JTnJkXLz_cp00BeEFjomRoUAaltoN8tdie8OLd2SEqqTUmG_ViFsiesePFv7HsvVBdwsrTgjxLQStWknpaNIzi8bR3cIWHE3dnQeij18rV0h7Ld8Mfzjnvq59D5uXrvHTzVPBBl4stFp1kD9pKxq-D7hGWYsD_THv9QPMwBwmXkSmgj1zO_b3INFweFeFHYXcnRjjVsLXlYLLMxQjUf_26wxRnvZCyDuo0l6a4z-cdvaJt0TFHRdsoq-Y7NR8tHUED63GwwIPeulmYgstBqdtfkjZttL_YM3z1u9VFGYwQ9uz5-r8NN3JRxJCBjeYUAxRRVwySUBfYPTqoKb_MKf8hYEChXuxmRNkx7PVPmtn9UvIzKFLSjoBachjepMCxhakOlrKe-0XVPktvalPuVtde8EKSFWZJG1pBG9qkN9Zk3yYwlW-8t9Pl4jYikyrdrmrO0xRU0qlhFFiV
' Generated on: 2025-10-09T12:09:20.590099800

@startuml
skinparam classAttributeIconSize 0
hide circle

class Attribute {
  -idToken: Token
  -type: Type
  -visibility: Token
  --
  +Attribute(idToken: Token, type: Type, visibility: Token)
  +getName(): String
  +getLine(): int
  +getType(): Type
  +isPublic(): boolean
  +estaBienDeclarado(): void
}

class Constructor {
  -idToken: Token
  -visibility: Token
  -parameters: HashMap<String, Parameter>
  -paramList: List<Parameter>
  --
  +Constructor(idToken: Token, visibility: Token)
  +getName(): String
  +getVisibility(): Token
  +getParamList(): List<Parameter>
  +getLine(): int
  +addParameter(parameter: Parameter): void
  +estaBienDeclarado(): void
}

class Method {
  -parameters: HashMap<String, Parameter>
  -paramList: List<Parameter>
  -idToken: Token
  -returnType: Type
  -modifier: Token
  -visibility: Token
  -hasBody: boolean
  --
  +Method(idToken: Token, returnType: Type, modifier: Token, visibility: Token)
  +Method(idToken: Token, returnType: Type, modifier: Token)
  +addParameter(parameter: Parameter): void
  +hasBody(): boolean
  +setHasBody(hasBody: boolean): void
  +getVisibility(): Token
  +getName(): String
  +getLine(): int
  +getParamList(): List<Parameter>
  +getReturnType(): Type
  +getModifier(): Token
  +estaBienDeclarado(): void
}

class Parameter {
  -idToken: Token
  -type: Type
  -position: int
  --
  +Parameter(idToken: Token, type: Type)
  +getName(): String
  +getLine(): int
  +getType(): Type
  +estaBienDeclarado(): void
}

class ConcreteClass {
  ~idToken: Token
  ~herencia: Token
  ~implementation: Token
  ~modificador: Token
  ~attributes: HashMap<String, Attribute>
  ~shadowedAttributes: HashMap<String, Attribute>
  ~methods: HashMap<String, Method>
  ~constructor: Constructor
  ~consolidated: boolean
  --
  +ConcreteClass(idToken: Token, modificador: Token)
  +consolidated(): boolean
  +estaBienDeclarado(): void
  +checkInheritance(): void
  +isAbstract(): boolean
  +isFinal(): boolean
  +isStatic(): boolean
  -imObject(): boolean
  +consolidar(): void
  -consolidatedParent(): void
  -implementMethod(method: Method): void
  -inheriteAttribute(attribute: Attribute): void
  -inheriteMethod(method: Method): void
  -checkVisibilityModifier(method: Method, existingMethod: Method): void
  -checkAbstractModifier(method: Method): void
  -checkMethodModifier(method: Method, existingMethod: Method): void
  +isClass(): boolean
  +isInterface(): boolean
  +getName(): String
  +getLine(): int
  +getModificador(): Token
  +getAttributes(): HashMap<String,Attribute>
  +getMethods(): HashMap<String,Method>
  +getConstructor(): Constructor
  +getHerencia(): Token
  +addAttribute(attribute: Attribute): void
  +addMethod(method: Method): void
  +addConstructor(constructor: Constructor): void
  +addInheritance(herencia: Token): void
  +addImplementation(implementation: Token): void
  -checkImplementation(): void
  -checkCircularInheritance(herencia: Token): void
}

interface EntityClass {
  ~estaBienDeclarado(): void
  ~consolidar(): void
  ~getName(): String
  ~getLine(): int
  ~getModificador(): Token
  ~getHerencia(): Token
  ~getMethods(): java.util.HashMap<String,Method>
  ~getAttributes(): java.util.HashMap<String,Attribute>
  ~getConstructor(): Constructor
  ~isAbstract(): boolean
  ~isStatic(): boolean
  ~isFinal(): boolean
  ~isClass(): boolean
  ~isInterface(): boolean
  ~consolidated(): boolean
  ~addAttribute(attribute: Attribute): void
  ~addMethod(method: Method): void
  ~addConstructor(constructor: Constructor): void
  ~addInheritance(herencia: Token): void
}

class Interface {
  -idToken: Token
  -herencia: Token
  -modificador: Token
  ~methods: HashMap<String, Method>
  ~attributes: HashMap<String, Attribute>
  -consolidated: boolean
  --
  +Interface(idToken: Token, modificador: Token)
  +estaBienDeclarado(): void
  +consolidated(): boolean
  +consolidar(): void
  -consolidatedParent(): void
  -inheritanceAttribute(attribute: Attribute): void
  -inheritanceMethod(m: Method): void
  +isInterface(): boolean
  +getHerencia(): Token
  +getModificador(): Token
  +getName(): String
  +getMethods(): HashMap<String,Method>
  +getLine(): int
  +getAttributes(): HashMap<String,Attribute>
  +getConstructor(): Constructor
  +addMethod(method: Method): void
  +addInheritance(herencia: Token): void
  -checkInheritance(): void
  -checkCircularInheritance(herencia: Token): void
  +addAttribute(attribute: Attribute): void
  +addConstructor(constructor: Constructor): void
  +isAbstract(): boolean
  +isClass(): boolean
  +isStatic(): boolean
  +isFinal(): boolean
}

class SymbolTable {
  +claseActual: EntityClass
  ~attributeActual: Attribute
  ~methodActual: Method
  ~constructorActual: Constructor
  +clases: HashMap<String, EntityClass>
  --
  +SymbolTable()
  +createPredefinedClasses(): void
  +chequeoDeclaraciones(): void
  +setCurrentClass(lexeme: String, nuevaClase: EntityClass): void
  +addCurrentClass(): void
  +setCurrentMethod(method: Method): void
  +setCurrentAttribute(attribute: Attribute): void
  +addCurrentConstructor(constructor: Constructor): void
  +getClass(lexeme: String): EntityClass
  +printTable(): void
}

class BooleanType {
  +BooleanType()
}

class CharType {
  +CharType()
}

class IntType {
  +IntType()
}

class PrimitiveType {
  -name: String
  --
  +PrimitiveType(name: String)
  +isPrimitive(): boolean
  +getName(): String
  +getLine(): int
}

class ReferenceType {
  -classIdName: Token
  --
  +ReferenceType(name: Token)
  +isPrimitive(): boolean
  +getName(): String
  +getLine(): int
}

interface Type {
  ~isPrimitive(): boolean
  ~getName(): String
  ~getLine(): int
}

class VoidType {
  +VoidType()
}

Attribute *-- Type
Constructor o-- Parameter
Method o-- Parameter
Method *-- Type
Parameter *-- Type
ConcreteClass ..|> EntityClass
ConcreteClass o-- Attribute
ConcreteClass o-- Method
ConcreteClass --> Constructor
EntityClass ..> Constructor
EntityClass ..> Attribute
EntityClass ..> Method
Interface ..|> EntityClass
Interface o-- Method
Interface o-- Attribute
Interface ..> Constructor
SymbolTable --> EntityClass
SymbolTable --> Attribute
SymbolTable --> Method
SymbolTable --> Constructor
SymbolTable o-- EntityClass
BooleanType --|> PrimitiveType
CharType --|> PrimitiveType
IntType --|> PrimitiveType
PrimitiveType ..|> Type
ReferenceType ..|> Type
VoidType --|> PrimitiveType
@enduml